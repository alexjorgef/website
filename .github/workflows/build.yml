name: Build & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"
  schedule:
  - cron: "0 0 * * 1,3,5,6"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-dependabot:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-demo-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-demo-

      - uses: actions/cache@v4
        id: gatsby-cache
        env:
          files: >-
            ${{ hashFiles('gatsby-config.mjs', 'gatsby-node.mjs') }}
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-gatsby-demo-${{ env.files }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-gatsby-demo-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build demo Gatsby site ðŸ”¨
        run: yarn build

  inject-data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Checkout private data ðŸ”¨
        uses: actions/checkout@v4
        with:
          repository: alexjorgef/website-data
          token: ${{ secrets.DATA_GITHUB_TOKEN }}
          path: website-data

      - name: Inject private data ðŸ”¨
        run: |
          rm -rf content/
          cp -rp website-data/production/* .
          rm -rf website-data/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main'
        with:
          include-hidden-files: true
          name: injected
          path: ./

  tests:
    needs:
      - inject-data
    runs-on: ubuntu-latest
    steps:

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: injected
          path: ./

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn cache dir)"

      # - name: Cache node modules
      #   uses: actions/cache@v4
      #   id: yarn-cache
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-

      # - uses: actions/cache@v4
      #   id: playwright-cache
      #   with:
      #     path: |
      #       ~/.cache/ms-playwright
      #     key: ${{ runner.os }}-playwright-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-playwright-

      # - uses: actions/cache@v4
      #   id: gatsby-cache
      #   env:
      #     files: >-
      #       ${{ hashFiles('gatsby-config.mjs', 'gatsby-node.mjs') }}
      #   with:
      #     path: |
      #       public
      #       .cache
      #     key: ${{ runner.os }}-gatsby-${{ env.files }}-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gatsby-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Scan current project
        uses: anchore/scan-action@v4
        with:
          path: .
          output-format: table
          fail-build: false
          severity-cutoff: negligible

      - name: Run ESLint ðŸ§ª
        run: yarn lint

      - name: Run Jest ðŸ§ª
        run: yarn test:ci

      - name: Build Gatsby site ðŸ”¨
        run: yarn build
        env:
          GATSBY_GITHUB_TOKEN: ${{ secrets.GATSBY_GITHUB_TOKEN }}
          GATSBY_GITLAB_TOKEN: ${{ secrets.GATSBY_GITLAB_TOKEN }}
          GATSBY_FORMSPREE_ID: ${{ secrets.GATSBY_FORMSPREE_ID }}
          GATSBY_RECAPTCHA_V2_SITE_KEY: ${{ secrets.GATSBY_RECAPTCHA_V2_SITE_KEY }}
          GATSBY_DISQUS_NAME: ${{ secrets.GATSBY_DISQUS_NAME }}
          GATSBY_MIXCLOUD_USERNAME: ${{ secrets.GATSBY_MIXCLOUD_USERNAME }}
          GATSBY_DISCOGS_TOKEN: ${{ secrets.GATSBY_DISCOGS_TOKEN }}
          GATSBY_DISCOGS_USERNAME: ${{ secrets.GATSBY_DISCOGS_USERNAME }}
          GATSBY_BANDCAMP_USERNAME: ${{ secrets.GATSBY_BANDCAMP_USERNAME }}

      - name: Install Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      - name: Run Playwright ðŸ§ª
        run: yarn e2e:build
        env:
          GATSBY_GITHUB_TOKEN: ${{ secrets.GATSBY_GITHUB_TOKEN }}
          GATSBY_GITLAB_TOKEN: ${{ secrets.GATSBY_GITLAB_TOKEN }}
          GATSBY_FORMSPREE_ID: ${{ secrets.GATSBY_FORMSPREE_ID }}
          GATSBY_RECAPTCHA_V2_SITE_KEY: ${{ secrets.GATSBY_RECAPTCHA_V2_SITE_KEY }}
          GATSBY_DISQUS_NAME: ${{ secrets.GATSBY_DISQUS_NAME }}
          GATSBY_MIXCLOUD_USERNAME: ${{ secrets.GATSBY_MIXCLOUD_USERNAME }}
          GATSBY_DISCOGS_TOKEN: ${{ secrets.GATSBY_DISCOGS_TOKEN }}
          GATSBY_DISCOGS_USERNAME: ${{ secrets.GATSBY_DISCOGS_USERNAME }}
          GATSBY_BANDCAMP_USERNAME: ${{ secrets.GATSBY_BANDCAMP_USERNAME }}

  build:
    needs:
      - tests
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: injected
          path: ./

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Validate tokens
        run: |
          curl -X POST -H "Authorization: bearer ${{ secrets.GATSBY_GITHUB_TOKEN }}" -H "Content-Type: application/json" -d '{"query": "{ viewer { login } }"}' https://api.github.com/graphql

      - name: Build Gatsby site ðŸ”¨
        run: yarn build
        env:
          GATSBY_GITHUB_TOKEN: ${{ secrets.GATSBY_GITHUB_TOKEN }}
          GATSBY_GITLAB_TOKEN: ${{ secrets.GATSBY_GITLAB_TOKEN }}
          GATSBY_FORMSPREE_ID: ${{ secrets.GATSBY_FORMSPREE_ID }}
          GATSBY_RECAPTCHA_V2_SITE_KEY: ${{ secrets.GATSBY_RECAPTCHA_V2_SITE_KEY }}
          GATSBY_DISQUS_NAME: ${{ secrets.GATSBY_DISQUS_NAME }}
          GATSBY_MIXCLOUD_USERNAME: ${{ secrets.GATSBY_MIXCLOUD_USERNAME }}
          GATSBY_DISCOGS_TOKEN: ${{ secrets.GATSBY_DISCOGS_TOKEN }}
          GATSBY_DISCOGS_USERNAME: ${{ secrets.GATSBY_DISCOGS_USERNAME }}
          GATSBY_BANDCAMP_USERNAME: ${{ secrets.GATSBY_BANDCAMP_USERNAME }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main'
        with:
          include-hidden-files: true
          name: build
          path: public

  build-vercel:
    needs:
      - tests
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: injected
          path: ./

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Install Vercel CLI
        run: yarn global add vercel@canary

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --yes --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main'
        with:
          include-hidden-files: true
          name: build-vercel
          path: .vercel/output/

  deploy-vercel:
    needs:
      - build-vercel
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-vercel
          path: .vercel/output/

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy-web3:
    needs:
      - build
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: public

      - name: Upload and pin to Web3-Storage ðŸš€
        uses: web3-storage/add-to-web3@v3
        id: w3up
        with:
          path_to_add: public
          proof: ${{ secrets.W3_PROOF }}
          secret_key: ${{ secrets.W3_PRINCIPAL }}
          wrap: false

      - name: Deploy _dnslink to Cloudflare ðŸš€
        run: |
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE }}/dns_records/${{ secrets.CLOUDFLARE_RECORD_ID }}" \
            -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_XAUTH_EMAIL }}" \
            -H "X-Auth-Key: ${{ secrets.CLOUDFLARE_XAUTH_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{"type":"TXT","name":"${{ secrets.CLOUDFLARE_RECORD_NAME }}","content":"dnslink=/ipfs/${{ steps.w3up.outputs.cid }}","ttl":1}' > /dev/null 2>&1
